/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server;

import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import javax.swing.SwingUtilities;

/**
 *
 * @author SMuherejee
 */
public class main extends javax.swing.JFrame {
    
    adjMicro adjM = new adjMicro();
    adjustMic adjM2 = new adjustMic();
    String wrok_dir = "C:\\SPIC-Server\\";
    public utility U = new utility();

    /**
     * Creates new form main
     */
    public main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        start_exp = new javax.swing.JButton();
        threshold = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Self_test = new javax.swing.JButton();
        restart = new javax.swing.JButton();
        test_mic2 = new javax.swing.JButton();
        start_ndi = new javax.swing.JButton();
        get_only_session = new javax.swing.JButton();
        retrive_session = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        stat = new javax.swing.JTextArea();
        removeAllWords = new javax.swing.JButton();

        jButton1.setText("jButton1");

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        start_exp.setText("Start Experiment");
        start_exp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                start_expActionPerformed(evt);
            }
        });

        threshold.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        threshold.setText("0.12");

        jLabel1.setText("Current Mic Sensetivity");

        jLabel2.setText("Current Word Chains");

        Self_test.setText("Self Test");
        Self_test.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Self_testActionPerformed(evt);
            }
        });

        restart.setText("Restart");
        restart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartActionPerformed(evt);
            }
        });

        test_mic2.setText("Test Mic");
        test_mic2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                test_mic2ActionPerformed(evt);
            }
        });

        start_ndi.setText("Start NDI");
        start_ndi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                start_ndiActionPerformed(evt);
            }
        });

        get_only_session.setText("only session");
        get_only_session.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_only_sessionActionPerformed(evt);
            }
        });

        stat.setColumns(20);
        stat.setRows(5);
        stat.setText("--");
        jScrollPane1.setViewportView(stat);

        removeAllWords.setText("Remove ALL");
        removeAllWords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllWordsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Self_test, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(start_ndi, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(threshold)
                                    .addComponent(jLabel1))
                                .addGap(117, 117, 117)
                                .addComponent(test_mic2)))
                        .addGap(0, 26, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(restart)
                    .addComponent(removeAllWords))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(retrive_session)
                    .addComponent(get_only_session, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(start_exp))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(threshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(test_mic2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(Self_test)
                        .addGap(18, 18, 18)
                        .addComponent(start_ndi))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(start_exp, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(retrive_session, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removeAllWords))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(restart)
                            .addComponent(get_only_session)))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void start_expActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_start_expActionPerformed
        
        server server = new server();
        server.setSensetivity(threshold.getText());
        server.setup();
        showOnScreen(1, server);
        server.setVisible(true);
//        server.setLocationRelativeTo(null);
        server.addWindowListener(new WindowAdapter() {
            public void windowClosed(WindowEvent e) {
                stat();
            }
        });
    }//GEN-LAST:event_start_expActionPerformed

    private void Self_testActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Self_testActionPerformed
        // TODO add your handling code here:
        self_server self = new self_server();
        self.setSensetivity(threshold.getText());
        self.loadData();
        self.setVisible(true);
    }//GEN-LAST:event_Self_testActionPerformed

    private void restartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartActionPerformed
        // TODO add your handling code here:
        File folder = new File("C:\\SPIC-Server\\data\\done\\");
        for (File fileEntry : folder.listFiles()) {
            if (!fileEntry.isDirectory()) {
                File source = new File(fileEntry.getPath());
                File dest = new File(fileEntry.getPath().replace("data\\done\\", "data\\"));
                try {
                    U.copyFileUsingStream(source, dest);
                    source.delete();
                } catch (IOException ex) {
                    java.util.logging.Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        stat();
    }//GEN-LAST:event_restartActionPerformed

    private void test_mic2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_test_mic2ActionPerformed
        // TODO add your handling code here:
        adjM2.setVisible(true);
        adjM2.addWindowListener(new WindowAdapter() {
            public void windowClosed(WindowEvent e) {
                threshold.setText(adjM2.getSFValue());
            }
        });
    }//GEN-LAST:event_test_mic2ActionPerformed

    private void start_ndiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_start_ndiActionPerformed
        // start NDI WaveFront
        try {
            Runtime.getRuntime().exec("C:\\Program Files (x86)\\Northern Digital Inc\\NDI WaveFront\\WaveFront.exe");
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
        /////////////////////////////////////////
    }//GEN-LAST:event_start_ndiActionPerformed

    private void get_only_sessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_only_sessionActionPerformed
        String name = retrive_session.getText();
        String path = "C:\\SPIC-Server\\data\\done\\";
        String Filename = path.concat(name);
        File source = new File(Filename);
        
        File dest = new File(Filename.replace("data\\done\\", "data\\"));
        try {
            U.copyFileUsingStream(source, dest);
            source.delete();
        } catch (IOException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        stat();
        retrive_session.setText("");

    }//GEN-LAST:event_get_only_sessionActionPerformed

    private void removeAllWordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllWordsActionPerformed
       File folder = new File("C:\\SPIC-Server\\data\\");
        for (File fileEntry : folder.listFiles()) {
            if (!fileEntry.isDirectory()) {
                File source = new File(fileEntry.getPath());
                File dest = new File(fileEntry.getPath().replace("data\\", "data\\done\\"));
                try {
                    U.copyFileUsingStream(source, dest);
                    source.delete();
                } catch (IOException ex) {
                    java.util.logging.Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        stat();
    }//GEN-LAST:event_removeAllWordsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                main m = new main();
                m.setVisible(true);
                m.setLocationRelativeTo(null);
                m.stat();
            }
        });
    }
    
    public void stat() {
        SwingUtilities.invokeLater(
                new Runnable() {
            @Override
            public void run() {
                String dominnos = "";
                File folder = new File("C:\\SPIC-Server\\data\\");
                for (File fileEntry : folder.listFiles()) {
                    if (!fileEntry.isDirectory()) {
                        dominnos = dominnos.concat(fileEntry.getName() + "\n");
                    }
                }
                dominnos = dominnos.concat("-----------\n");

                // done word chains
                File folder1 = new File("C:\\SPIC-Server\\data\\done\\");
                for (File fileEntry : folder1.listFiles()) {
                    if (!fileEntry.isDirectory()) {
                        dominnos = dominnos.concat(fileEntry.getName() + "\n");
                    }
                }
                
                stat.setText(dominnos);
            }
        }
        );
    }

     public  void showOnScreen(int screen, javax.swing.JFrame frame) {
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice[] gs = ge.getScreenDevices();
//         Point centerPoint = ge.getCenterPoint();
//         int dx = centerPoint.x - frame.getWidth() / 2;
//         int dy = centerPoint.y - frame.getHeight() / 2;  
            
        if (screen > -1 && screen < gs.length) {
//            this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);

            frame.setLocation(gs[screen].getDefaultConfiguration().getBounds().x, gs[screen].getDefaultConfiguration().getBounds().y);
            frame.setLocationRelativeTo(null);
        } else if (gs.length > 0) {
            frame.setLocation(gs[0].getDefaultConfiguration().getBounds().x, gs[0].getDefaultConfiguration().getBounds().y);
                        frame.setLocationRelativeTo(null);

        } else {
            throw new RuntimeException("No Screens Found");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Self_test;
    private javax.swing.JButton get_only_session;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeAllWords;
    private javax.swing.JButton restart;
    private javax.swing.JTextField retrive_session;
    private javax.swing.JButton start_exp;
    private javax.swing.JButton start_ndi;
    private javax.swing.JTextArea stat;
    private javax.swing.JButton test_mic2;
    private javax.swing.JTextField threshold;
    // End of variables declaration//GEN-END:variables
}
